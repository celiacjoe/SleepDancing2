#pragma kernel CSMain

Texture2D<float4> reader; 
Texture2D<float4> reader2;
RWTexture2D<float4> writer;
RWTexture2D<float4> writer2;
SamplerState _LinearClamp;
float _time;
float _taille;
float _forme;
float _disparition;
float _resx;
float _resy;
float _spectrum;

float4 tex( float2 g, float2 p, float2 s) {
	float2 gp = g + p;
	if (gp.x >= s.x) gp.x = gp.x - s.x;
	if (gp.y >= s.y) gp.y = gp.y - s.y;
	if (gp.x < 0.0) gp.x = s.x + gp.x;
	if (gp.y < 0.0) gp.y = s.y + gp.y;
	//return texture(sam, gp / s);
	return reader.SampleLevel(_LinearClamp, gp / s + 0.5 /s, 0);
}
float4 getState( float2 g, float2 s, float n) {
	float4 p = float4(0.,0.,0.,0.);
	for (float i = 0.; i < n; i++) { p = tex( g, -p.xy, s); }
	return p;
}
float4 rd(float p) {
	p = floor(p);
	return frac(sin(float4(dot(p, 45.), dot(p, 98.), dot(p, 632.),
		dot(p, 144.)))*7845.236);
}
float4 no(float p) { return lerp(rd(p), rd(p + 1.), frac(p)); }
float rd1(float p) {
	p = floor(p);
	return frac(sin(dot(p, 45.))*7845.236);
}
float no1(float p) { return lerp(rd(p), rd(p + 1.), frac(p)); }
float3 lensflares(float2 uv, float2 pos)
{
	float2 main = uv - pos;
	float2 uvd = uv * (length(uv));

	float ang = atan2(main.y, main.x);
	float dist = length(main);
	dist = pow(dist, 0.1);

	float r1 = 0.;
	float r2 = 0.;
	float r3 = 0.;
	float2 uvx = uv;
	for (int i = 0; i < 8; i++) {
		float4 ra = no(float(i + 5)*26. + _time * 0.1);
		float4 ra2 = ra * float4(0.6, 0.8, 7., 2.);
		float4 ra3 = ra * float4(20., 2.5, 0.5, 2.);
		float4 ra4 = no(float(i + 24)*26. + _time * 0.1 + 0.5);

		uvx = lerp(lerp(uv*lerp(1., ra4.x, smoothstep(0.4, 0.6, ra4.a)),
			uvx*pow(ra4.y, 2.), ra4.z), uvd, -ra2.a);
		r1 += max(0.01 - pow(length(uvx + ra2.x*pos), pow(ra2.z, 0.8)), .0)*6.0;
		r2 += max(0.01 - pow(length(uvx + (ra2.x + ra2.y)*pos), pow(ra2.z, 0.8)), .0)*5.0;
		r3 += max(0.01 - pow(length(uvx + (ra2.x + ra2.y*2.)*pos), pow(ra2.z, 0.8)), .0)*3.0;
		r1 += max(1.0 / (1.0 + 32.0*pow(length(uvx + ra3.x*pos), ra3.y)), .0)*0.25;
		r2 += max(1.0 / (1.0 + 32.0*pow(length(uvx + (ra3.x + ra3.z)*pos), ra3.y)), .0)*0.23;
		r3 += max(1.0 / (1.0 + 32.0*pow(length(uvx + (ra3.x + ra3.z*2.)*pos), ra3.y)), .0)*0.21;
	}

	return float3(r1, r2, r3);
}


[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	
	float2 g = float2(id.x,id.y);
	float2 res=float2(_resx, _resy);
	float tt = 1.+_taille*3.;
	float4 r = tex( g, float2(tt, 0), res);
	float4 t = tex( g, float2(0, tt), res);
	float4 l = tex( g, float2(-tt, 0), res);
	float4 b = tex( g, float2(0, -tt), res);
	float2 uv = g / res;
	float2 c = sin(uv * 6.28318)*.5 + .5;
	float cc = c.x + c.y;
	writer[id] = getState( g, res, cc * 2. + 1.);
	writer[id] += float4(r.z - l.z, t.z - b.z,0.,0.);
	float4 dp = (r + t + l + b) / 4.;
	float div = ((l - r).x + (b - t).y) / 20.;
	writer[id] = float4(writer[id].xy,dp.z - div, writer[id].a);
	float zo = smoothstep(0.3, 0., reader2.SampleLevel(_LinearClamp, float2(1.-uv.x, 0.5) + 0.5 / res, 0));
	writer[id] = lerp(writer[id]*(1.- _disparition*0.02), float4(0.5,0.5,0.5,0.5),zo);
	float2 uf = (uv - 0.5)*2.;
	uf.x *= res.x / res.y;
	uf += reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).xy*0.5;
	float3 flare = lensflares(uf*1.5, float2(no1(_time*1. + 596.), no1(_time*1. + 475.))*1.5);
	float3 col = smoothstep(-0.08, 0.9, pow(flare, float3(0.5, 0.5, 0.5)));
	writer2[id] = float4(col, 0.);
	//writer[id] = smoothstep(0.3,0.2,reader2.SampleLevel(_LinearClamp, float2(uv.x,0.5) + 0.5 / res, 0));
	//writer[id] = abs(writer[id]);
	//writer[id] = float4(uv, 0., 0.);


}
